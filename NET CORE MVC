dotnet new mvc -n BugTracker
cd BugTracker
dotnet add package Microsoft.EntityFrameworkCore.SqlServer
dotnet add package Microsoft.EntityFrameworkCore.Tools
public class User
{
    public int UserID { get; set; }
    public string Username { get; set; }
    public string Password { get; set; }
    public int RoleID { get; set; }
    public Role Role { get; set; }
}
public class Role
{
    public int RoleID { get; set; }
    public string RoleName { get; set; }
    public ICollection<User> Users { get; set; }
}
public class Bug
{
    public int BugID { get; set; }
    public string Summary { get; set; }
    public string Description { get; set; }
    public int CreatedBy { get; set; }
    public User CreatedByUser { get; set; }
    public int? ResolvedBy { get; set; }
    public User ResolvedByUser { get; set; }
    public DateTime CreatedAt { get; set; } = DateTime.Now;
    public DateTime? ResolvedAt { get; set; }
    public string Status { get; set; } = "Open";
}
using Microsoft.EntityFrameworkCore;

public class ApplicationDbContext : DbContext
{
    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options)
    {
    }

    public DbSet<User> Users { get; set; }
    public DbSet<Role> Roles { get; set; }
    public DbSet<Bug> Bugs { get; set; }
}
{
  "ConnectionStrings": {
    "DefaultConnection": "Server=(localdb)\\mssqllocaldb;Database=BugTrackerDb;Trusted_Connection=True;MultipleActiveResultSets=true"
  },
  ...
}
public class Startup
{
    public void ConfigureServices(IServiceCollection services)
    {
        services.AddDbContext<ApplicationDbContext>(options =>
            options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection")));
        
        services.AddControllersWithViews();
    }

    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
    {
        if (env.IsDevelopment())
        {
            app.UseDeveloperExceptionPage();
        }
        else
        {
            app.UseExceptionHandler("/Home/Error");
            app.UseHsts();
        }
        app.UseHttpsRedirection();
        app.UseStaticFiles();

        app.UseRouting();

        app.UseAuthorization();

        app.UseEndpoints(endpoints =>
        {
            endpoints.MapControllerRoute(
                name: "default",
                pattern: "{controller=Home}/{action=Index}/{id?}");
        });
    }
}
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Linq;
using System.Threading.Tasks;

public class BugsController : Controller
{
    private readonly ApplicationDbContext _context;

    public BugsController(ApplicationDbContext context)
    {
        _context = context;
    }

    // GET: Bugs
    public async Task<IActionResult> Index()
    {
        var bugs = await _context.Bugs.Include(b => b.CreatedByUser).Include(b => b.ResolvedByUser).ToListAsync();
        return View(bugs);
    }

    // GET: Bugs/Create
    public IActionResult Create()
    {
        return View();
    }

    // POST: Bugs/Create
    [HttpPost]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> Create([Bind("Summary,Description")] Bug bug)
    {
        if (ModelState.IsValid)
        {
            bug.CreatedBy = 1; // Replace with the logged-in user's ID
            _context.Add(bug);
            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }
        return View(bug);
    }

    // GET: Bugs/Edit/5
    public async Task<IActionResult> Edit(int? id)
    {
        if (id == null)
        {
            return NotFound();
        }

        var bug = await _context.Bugs.FindAsync(id);
        if (bug == null)
        {
            return NotFound();
        }
        return View(bug);
    }

    // POST: Bugs/Edit/5
    [HttpPost]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> Edit(int id, [Bind("BugID,Summary,Description")] Bug bug)
    {
        if (id != bug.BugID)
        {
            return NotFound();
        }

        if (ModelState.IsValid)
        {
            try
            {
                _context.Update(bug);
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!BugExists(bug.BugID))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }
            return RedirectToAction(nameof(Index));
        }
        return View(bug);
    }

    // GET: Bugs/Delete/5
    public async Task<IActionResult> Delete(int? id)
    {
        if (id == null)
        {
            return NotFound();
        }

        var bug = await _context.Bugs
            .FirstOrDefaultAsync(m => m.BugID == id);
        if (bug == null)
        {
            return NotFound();
        }

        return View(bug);
    }

    // POST: Bugs/Delete/5
    [HttpPost, ActionName("Delete")]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> DeleteConfirmed(int id)
    {
        var bug = await _context.Bugs.FindAsync(id);
        _context.Bugs.Remove(bug);
        await _context.SaveChangesAsync();
        return RedirectToAction(nameof(Index));
    }

    private bool BugExists(int id)
    {
        return _context.Bugs.Any(e => e.BugID == id);
    }

    // POST: Bugs/Resolve/5
    [HttpPost]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> Resolve(int id)
    {
        var bug = await _context.Bugs.FindAsync(id);
        if (bug == null)
        {
            return NotFound();
        }

        bug.Status = "Resolved";
        bug.ResolvedBy = 2; // Replace with the logged-in RD user's ID
        bug.ResolvedAt = DateTime.Now;

        _context.Update(bug);
        await _context.SaveChangesAsync();
        return RedirectToAction(nameof(Index));
    }
}
@model IEnumerable<Bug>

@{
    ViewData["Title"] = "Bugs";
}

<h1>Bugs</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.First().Summary)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().Description)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().CreatedByUser.Username)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().Status)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Summary)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Description)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CreatedByUser.Username)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Status)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.BugID">Edit</a> |
                    <a asp-action="Delete" asp-route-id="@item.BugID">Delete</a> |
                    @if (item.Status == "Open")
                    {
                        <form asp-action="Resolve" method="post" style="display:inline;">
                            <input type="hidden" name="id" value="@item.BugID" />
                            <button type="submit">Resolve</button>
                        </form>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>
@model Bug

@{
    ViewData["Title"] = "Create Bug";
}

<h1>Create Bug</h1>

<h4>Bug</h4>
<hr />
<div class="row">
    <div class="col-md-4">
